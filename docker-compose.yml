services:
  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: .env
    ports:
      - $MYSQL_CONFIG_LOCAL_PORT:$MYSQL_CONFIG_DOCKER_PORT
    volumes:
      - db:/var/lib/mysql
      # - ./api/scripts/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    networks:
      - backend

  api:
    depends_on:
      - mysqldb
    build: ./api
    entrypoint:
      - yarn
      - dev
    ports:
      - '8080:8080'
    volumes:
      - ./api:/usr/src/app
      - /usr/src/app/node_modules
    env_file: .env
    # use database-agnostic names in case we want to migrate database
    environment:
      - DB_HOST=mysqldb
      - DB_USER=$MYSQL_CONFIG_USER
      - DB_PASSWORD=$MYSQL_ROOT_PASSWORD
      - DB_NAME=$MYSQL_DATABASE
      - DB_PORT=$MYSQL_CONFIG_DOCKER_PORT
      # - CLIENT_ORIGIN_ALLOW_LIST=$CLIENT_ORIGIN_ALLOW_LIST
      # - NODE_DOCKER_PORT=$NODE_DOCKER_PORT
      # uncomment the below for manually resetting the database
      # - FORCE_DB_RESET=true
    networks:
      - frontend
      - backend

  reverse_proxy:
    depends_on:
      - api
    container_name: reverse_proxy
    hostname: reverse_proxy
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx:/etc/nginx
      # - ./certs:/etc/ssl/private
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    networks:
      - frontend
      - backend
    restart: always

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

  web:
    build: ./web
    environment:
      - REACT_APP_API_BASE_URL=$CLIENT_API_BASE_URL
    ports:
      - '3000:3000'
    volumes:
      - ./web:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - api
    networks:
      - frontend

volumes:
  db:
networks:
  backend:
  frontend:
